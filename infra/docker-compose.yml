#docker-compose.yml
version: '3.8'

services:
  mysql:
    image: mysql:8
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - app-network

  blue:
    build:
      context: ../backend/mafia
      dockerfile: Dockerfile
      args:
        - PROFILE=blue
    container_name: mafia-blue
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=${PROFILE:-blue}
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/${MYSQL_DATABASE}?useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=${MYSQL_USER}
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_PASSWORD}
      - SERVER_PORT=8081
    restart: always
    networks:
      - app-network

  green: # green ÏÑúÎπÑÏä§ Ï∂îÍ∞Ä
    build:
      context: ../backend/mafia
      dockerfile: Dockerfile
      args:
        - PROFILE=green
    container_name: mafia-green
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=${PROFILE:-green}
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/${MYSQL_DATABASE}?useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=${MYSQL_USER}
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_PASSWORD}
      - SERVER_PORT=8082
    restart: always
    networks:
      - app-network

  nginx: # Nginx ÏÑúÎπÑÏä§ Ï∂îÍ∞Ä
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - blue
      - green
    networks:
      - app-network
    restart: always

volumes:
  mysql_data:
  redis_data:

networks:
  app-network:
    driver: bridge


version: '3.8'

services:
  openvidu-server:
    image: openvidu/openvidu-server-kms:latest
    container_name: openvidu-server
    restart: always
    ports:
      - "4443:4443"  # OpenVidu Í∏∞Î≥∏ Ìè¨Ìä∏
    environment:
      - OPENVIDU_SECRET=MY_SECRET_KEY  # ÏõêÌïòÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Î°ú ÏÑ§Ï†ï
      - OPENVIDU_CORS=*
      - OPENVIDU_RECORDING=false  # ÎÖπÌôî ÎπÑÌôúÏÑ±Ìôî
      - OPENVIDU_STREAMS_VIDEO=false  # üî• ÎπÑÎîîÏò§ Ïä§Ìä∏Î¶º ÎπÑÌôúÏÑ±Ìôî (ÏùåÏÑ± Ï†ÑÏö©)
      - OPENVIDU_STREAMS_AUDIO=true   # ‚úÖ Ïò§ÎîîÏò§ Ïä§Ìä∏Î¶º ÌôúÏÑ±Ìôî
    networks:
      - openvidu_net

networks:
  openvidu_net:
    driver: bridge
